// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace RallyResults.Public.AT
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("RallyResultsEvents")]
    public partial class RallyResultsEventsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "RallyResultsEvents.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "RallyResultsEvents", "In order to insert, update, delete and select from the rally results events datab" +
                    "ase\nAs an end user\nI want to verify the API response", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Insert Rally Results Event")]
        [NUnit.Framework.CategoryAttribute("events")]
        [NUnit.Framework.TestCaseAttribute("{\"name\": \"Westlodge Fastnet Rally 2015\",\"startdate\": \"2015-10-24\",\"finishdate\": \"" +
            "2015-10-25\",\"surface\": \"Tarmac\",\"image\": \"image.jpg\",\"service\": [3, 6],\"endofday" +
            "\": [10],\"category\": [{\"type\": \"Main Field\",\"class\": \"1\"}]}", "201", null)]
        [NUnit.Framework.TestCaseAttribute("{\"name\": \"Westlodge Fastnet Rally 2015\",\"startdate\": \"2015-10-24\",\"finishdate\": \"" +
            "2015-10-25\",\"surface\": \"Tarmac\",\"image\": \"image.jpg\",\"service\": [3, 6],\"endofday" +
            "\": [10],\"category\": [{\"type\": \"Main Field\",\"class\": \"1\"}]}", "201", null)]
        public virtual void InsertRallyResultsEvent(string object_String, string result_Code, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "events"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Insert Rally Results Event", @__tags);
#line 8
 this.ScenarioSetup(scenarioInfo);
#line 9
  testRunner.Given(string.Format("I have a rally results event object \"{0}\"", object_String), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 10
  testRunner.And("I send a request to the API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 11
  testRunner.Then(string.Format("the result code should be \"{0}\"", result_Code), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
